{"version":3,"file":"runty-logger.m.js","sources":["../src/index.js"],"sourcesContent":["'use strict'\n\nfunction createLogger (options = {}) {\n  const {level = 'info', name} = options\n  const isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n\n  const levels = {\n    trace: {\n      priority: 10,\n      symbol: '🔍',\n      color: isNode ? '\\x1b[34m%s\\x1b[0m' : 'color: #6699cc;'\n    },\n    debug: {\n      priority: 20,\n      symbol: '🐛',\n      color: isNode ? '\\x1b[36m%s\\x1b[0m' : 'color: #66cccc;'\n    },\n    info: {\n      priority: 30,\n      symbol: '✨',\n      color: isNode ? '\\x1b[32m%s\\x1b[0m' : 'color: #99cc99;'\n    },\n    warn: {\n      priority: 40,\n      symbol: '⚠️',\n      color: isNode ? '\\x1b[33m%s\\x1b[0m' : 'color: #ffcc66;'\n    },\n    error: {\n      priority: 50,\n      symbol: '🚨',\n      color: isNode ? '\\x1b[31m%s\\x1b[0m' : 'color: #f2777a;'\n    },\n    fatal: {\n      priority: 60,\n      symbol: '💀',\n      color: isNode ? '\\x1b[31m%s\\x1b[0m' : 'color: #f2777a;'\n    }\n  }\n\n  if (!levels[level]) {\n    throw Error('Invalid log level set')\n  }\n\n  function getTimeStamp () {\n    const date = new Date()\n    const pad = (time) => time.length === 2 ? time : `0${time}`\n    return `${pad(date.getHours().toString())}:${pad(date.getMinutes().toString())}:${pad(date.getSeconds().toString())}`\n  }\n\n  const logger = {}\n\n  const log = (level) => {\n    const {symbol, color} = levels[level]\n    const outputName = name ? `${name}:` : ''\n\n    return (message, data = '') => {\n      if (isNode) {\n        const output = `${symbol} ${getTimeStamp()} ${outputName}${color} - ${color}`\n        console.log(output, level, message, data)\n        return data || message\n      } else {\n        const output = `${getTimeStamp()} ${outputName}%c${level} %c- %c${message}`\n        console.log(output, color, '', color, data)\n        return data || message\n      }\n    }\n  }\n\n  for (let current in levels) {\n    logger[current] = levels[current].priority >= levels[level].priority\n      ? log(current)\n      : (message, data) => data || message\n  }\n\n  return logger\n}\n\nmodule.exports = createLogger\n"],"names":["module","exports","options","name","isNode","Object","prototype","toString","call","process","levels","trace","priority","symbol","color","debug","info","warn","error","fatal","level","Error","getTimeStamp","const","date","Date","pad","time","length","getHours","getMinutes","getSeconds","logger","log","outputName","message","data","output","console","let","current"],"mappings":"AA6EAA,OAAOC,QA3EP,SAAuBC,sBACrB,6BAAe,YAAQC,SACjBC,EAA0F,qBAAjFC,OAAOC,UAAUC,SAASC,KAAwB,oBAAZC,QAA0BA,QAAU,GAEnFC,GACJC,OACEC,SAAU,GACVC,OAAQ,KACRC,MAAOV,EAAS,cAAsB,mBAExCW,OACEH,SAAU,GACVC,OAAQ,KACRC,MAAOV,EAAS,cAAsB,mBAExCY,MACEJ,SAAU,GACVC,OAAQ,IACRC,MAAOV,EAAS,cAAsB,mBAExCa,MACEL,SAAU,GACVC,OAAQ,KACRC,MAAOV,EAAS,cAAsB,mBAExCc,OACEN,SAAU,GACVC,OAAQ,KACRC,MAAOV,EAAS,cAAsB,mBAExCe,OACEP,SAAU,GACVC,OAAQ,KACRC,MAAOV,EAAS,cAAsB,oBAI1C,IAAKM,EAAOU,GACV,MAAMC,MAAM,yBAGd,SAASC,IACPC,IAAMC,EAAO,IAAIC,KACXC,WAAOC,UAAyB,IAAhBA,EAAKC,OAAeD,MAAWA,GACrD,OAAUD,EAAIF,EAAKK,WAAWtB,gBAAemB,EAAIF,EAAKM,aAAavB,gBAAemB,EAAIF,EAAKO,aAAaxB,YAG1GgB,IAAMS,KAEAC,WAAOb,GACX,MAAwBV,EAAOU,GAAxBP,WAAQC,UACToB,EAAa/B,EAAUA,MAAU,GAEvC,gBAAQgC,EAASC,GACf,kBADsB,IAClBhC,EAAQ,CACVmB,IAAMc,EAASxB,MAAaS,QAAkBY,EAAapB,QAAWA,EAEtE,OADAwB,QAAQL,IAAII,EAAQjB,EAAOe,EAASC,GAC7BA,GAAQD,EAEfZ,IAAMc,EAAYf,QAAkBY,OAAed,YAAee,EAElE,OADAG,QAAQL,IAAII,EAAQvB,EAAO,GAAIA,EAAOsB,GAC/BA,GAAQD,IAKrB,IAAKI,IAAIC,KAAW9B,EAClBsB,EAAOQ,GAAW9B,EAAO8B,GAAS5B,UAAYF,EAAOU,GAAOR,SACxDqB,EAAIO,YACHL,EAASC,UAASA,GAAQD,GAGjC,OAAOH"}